## `makeMatrix` creates a special "matrix" object that can cache its inverse.
## `cacheinverse` computes the inverse of the special "matrix" returned by `makeMatrix`. If the inverse has
##  already been calculated (and the matrix has not changed), then the `cacheinverse` retrieves the inverse from the cache.

## This function creates a special 'matrix' object that can cache its inverse.

makeMatrix <- function(x = numeric()) {
        s <- NULL
        set <- function(y) {
                x <<- y
                s <<- NULL
        }
        get <- function() x
        setinverse <- function(solve) s <<- solve
        getinverse <- function() s
        list(set = set, get = get,
             setinverse = setinverse,
             getinverse = inverse)
}

## This function computes the inverse of the special "matrix" returned by `makeMatrix`. If the inverse has
## already been calculated (and the matrix has not changed), then the `cacheinverse` retrieves the inverse from the cache.


cacheinverse <- function(x, ...) {
        s <- x$getinverse()
        if(!is.null(s)) {
                message("getting cached data")
                return(s)
                }
        data <- x$get()
        s <- solve(data, ...)
        x$setinverse(s)
        s
}
